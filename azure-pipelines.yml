# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
- master

jobs:

# - job: 'Test'
#   pool:
#     vmImage: 'Ubuntu-16.04'
#   strategy:
#     matrix:
#       Python37:
#         python.version: '3.7'
#     maxParallel: 4

#   steps:
#   - task: UsePythonVersion@0
#     inputs:
#       versionSpec: '$(python.version)'
#       architecture: 'x64'

#   - script: python -m pip install --upgrade pip && pip install -r requirements.txt -r requirements-test.txt
#     displayName: 'Install dependencies'

#   - script: python -m pip install -e .
#     displayName: 'Install SolarForecastArbiter API'

#   - script: |
#       pytest sfa_api --doctest-modules --junitxml=junit/test-results.xml --cov --cov-report=xml --cov-report=html
#     displayName: 'pytest'

#   - script: |
#       flake8 sfa_api
#     displayName: 'flake8'

#   - task: PublishTestResults@2
#     inputs:
#       testResultsFiles: '**/test-results.xml'
#       testRunTitle: 'Python $(python.version)'
#     condition: succeededOrFailed()

#   - task: PublishCodeCoverageResults@1
#     inputs:
#       codeCoverageTool: Cobertura
#       summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/coverage.xml'
#       reportDirectory: '$(System.DefaultWorkingDirectory)/**/htmlcov'

#   - script: |
#       bash <(curl https://codecov.io/bash) -t 8c76f562-08c0-4ad6-be35-026cceabcc1e -f coverage.xml -F adder -F subtractor
#     displayName: 'codecov'

# - job: 'Publish'
#   dependsOn: 'Test'
#   pool:
#     vmImage: 'Ubuntu-16.04'

#   steps:
#   - task: UsePythonVersion@0
#     inputs:
#       versionSpec: '3.x'
#       architecture: 'x64'

#   - script: python setup.py sdist
#     displayName: 'Build sdist'

    
- job: 'TestDatabase'
  pool:
    vmImage: 'Ubuntu-16.04'

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.x'
      architecture: 'x64'

  - task: Docker@1
    displayName: 'start mysql'
    inputs:
      command: run
      containerName: arbitermysql
      runInBackground: false
      restartPolicy: onFailure
      maxRestartRetries: 5
      imageName: percona:8.0-centos
      ports: |
        32768:3306
      envVars: |
        MYSQL_ROOT_PASSWORD=testpassword
        MYSQL_DATABASE=arbiter_data
      volumes: |
        /home/vsts/work/1/s/datastore/conf:/etc/my.cnf.d

  - script: datastore/migrations/wait-for -t 60 127.0.0.1:32768
    displayName: 'Wait for mysql'

  - task: Docker@1
    displayName: 'migrate db'
    inputs:
      command: run
      runInBackground: false
      imageName: migrate/migrate:v4.2.5
      volumes: |
        /home/vsts/work/1/s/datastore/migrations:/migrations
      containerCommand: -path=/migrations -database mysql://root:testpassword@tcp(arbitermysql:3306)/arbiter_data up
        
  - script: python -m pip install --upgrade pip && pip install -r datastore/test-requirements.txt
    displayName: 'Install pytest & dependencies'

  - script: MYSQL_PORT=32768 pytest datastore --junitxml=junit/db-test-results.xml
    displayName: 'Test database'

  - task: PublishTestResults@2
    inputs:
      testResultsFiles: '**/db-test-results.xml'
      testRunTitle: 'Database'
    condition: succeededOrFailed()

